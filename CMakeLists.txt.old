# Sprint 1: Minimal CMake Foundation
cmake_minimum_required(VERSION 3.16)

project(CloudRegistration VERSION 1.0.0 LANGUAGES CXX)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Configure MSVC
if(MSVC)
    # Warning level 4
    add_compile_options(/W4)
    # UTF-8 encoding
    add_compile_options(/utf-8)
endif()

# Configure GCC/Clang compilers (Linux/macOS)
if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
    # UTF-8 encoding
    add_compile_options(-finput-charset=UTF-8 -fexec-charset=UTF-8)
    # High warning level
    add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# Output directory
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Create minimal executable for Sprint 1
add_executable(CloudRegistration src/main.cpp)

# Source files
set(SOURCES
    src/main.cpp
    src/mainwindow.cpp
    src/projecthubwidget.cpp
    src/createprojectdialog.cpp
    src/projectmanager.cpp
    src/recentprojectsmanager.cpp
    src/sidebarwidget.cpp
    src/project.cpp
    src/pointcloudviewerwidget.cpp
    src/e57parserlib.cpp
    src/IE57Parser.cpp
    src/MainPresenter.cpp
    src/lasparser.cpp
    src/loadingsettingsdialog.cpp
    src/voxelgridfilter.cpp
    src/performance_profiler.cpp
    src/progressmanager.cpp
    src/pointcloudloadmanager.cpp
    src/screenspaceerror.cpp
    src/sqlitemanager.cpp
    src/projecttreemodel.cpp
    src/scanimportmanager.cpp
    # src/E57ParserCore.cpp  # Temporarily disabled for Sprint 4 testing
    src/ProjectStateService.cpp
    src/rendering/GpuCuller.cpp
    # Sprint 1: 3D Point Cloud Visualization
    src/rendering/OpenGLRenderer.cpp
    src/camera/CameraController.cpp
    src/rendering/LODManager.cpp
    src/ui/ViewerToolbar.cpp
    # Sprint 2: Registration workflow components
    # src/registration/WorkflowStateMachine.cpp  # To be implemented
    src/registration/Target.cpp
    src/registration/TargetCorrespondence.cpp
    src/registration/TargetManager.cpp
    src/registration/RegistrationProject.cpp
    src/registration/RegistrationWorkflowWidget.cpp
    src/ui/WorkflowProgressWidget.cpp
    # Sprint 3: Target Detection and Registration
    src/detection/TargetDetectionBase.cpp
    src/detection/SphereDetector.cpp
    src/detection/NaturalPointSelector.cpp
    # src/ui/TargetDetectionDialog.cpp  # To be implemented
    # Sprint 4: Manual Alignment Implementation
    src/algorithms/LeastSquaresAlignment.cpp
    src/registration/AlignmentEngine.cpp
    src/registration/ErrorAnalysis.cpp
    src/ui/AlignmentControlPanel.cpp
    # Sprint 5: ICP Registration Algorithm
    src/algorithms/ICPRegistration.cpp
    src/algorithms/PointToPlaneICP.cpp
    src/ui/ICPProgressWidget.cpp
    # Sprint 7: Performance Optimization & UI Polish
    src/performance/MemoryManager.cpp
    # src/performance/ParallelProcessing.cpp  # To be implemented
    src/ui/UIThemeManager.cpp
    src/ui/UserPreferences.cpp
    # Sprint 9: Advanced Registration Techniques
    src/registration/PoseGraph.cpp
    src/registration/PoseGraphBuilder.cpp
    src/registration/FeatureBasedRegistration.cpp
    src/optimization/BundleAdjustment.cpp
    src/features/FeatureExtractor.cpp
    src/analysis/DifferenceAnalysis.cpp
    # Sprint 6: Export and Quality Assessment
    src/export/FormatWriters/E57Writer.cpp
    src/export/FormatWriters/LASWriter.cpp
    src/export/FormatWriters/PLYWriter.cpp
    src/export/FormatWriters/XYZWriter.cpp
    src/quality/QualityAssessment.cpp
    src/quality/PDFReportGenerator.cpp
    src/crs/CoordinateSystemManager.cpp
)

# Header files
set(HEADERS
    src/mainwindow.h
    src/projecthubwidget.h
    src/createprojectdialog.h
    src/projectmanager.h
    src/recentprojectsmanager.h
    src/sidebarwidget.h
    src/project.h
    src/pointcloudviewerwidget.h
    src/IPointCloudViewer.h
    src/e57parserlib.h
    src/IE57Parser.h
    src/IE57Writer.h
    src/IMainView.h
    src/MainPresenter.h
    src/lasparser.h
    src/loadingsettingsdialog.h
    src/loadingsettings.h
    src/lasheadermetadata.h
    src/voxelgridfilter.h
    src/performance_profiler.h
    src/progressmanager.h
    src/pointcloudloadmanager.h
    src/screenspaceerror.h
    src/sqlitemanager.h
    src/projecttreemodel.h
    src/scanimportmanager.h
    # src/E57ParserCore.h  # Temporarily disabled for Sprint 4 testing
    src/ProjectStateService.h
    # Sprint 1: 3D Point Cloud Visualization
    src/rendering/OpenGLRenderer.h
    src/camera/CameraController.h
    src/rendering/LODManager.h
    src/ui/ViewerToolbar.h
    # Sprint 2: Registration workflow headers
    # src/registration/WorkflowStateMachine.h  # To be implemented
    src/registration/Target.h
    src/registration/TargetCorrespondence.h
    src/registration/TargetManager.h
    src/registration/RegistrationProject.h
    src/registration/RegistrationWorkflowWidget.h
    src/ui/WorkflowProgressWidget.h
    # Sprint 3: Target Detection and Registration Headers
    src/detection/TargetDetectionBase.h
    src/detection/SphereDetector.h
    src/detection/NaturalPointSelector.h
    # src/ui/TargetDetectionDialog.h  # To be implemented
    # Sprint 4: Manual Alignment Implementation
    src/algorithms/LeastSquaresAlignment.h
    src/registration/AlignmentEngine.h
    src/registration/ErrorAnalysis.h
    src/ui/AlignmentControlPanel.h
    # Sprint 5: ICP Registration Algorithm
    src/algorithms/ICPRegistration.h
    src/algorithms/PointToPlaneICP.h
    src/ui/ICPProgressWidget.h
    # Sprint 7: Performance Optimization & UI Polish
    src/performance/MemoryManager.h
    # src/performance/ParallelProcessing.h  # To be implemented
    src/ui/UIThemeManager.h
    src/ui/UserPreferences.h
    # Sprint 9: Advanced Registration Techniques
    src/registration/PoseGraph.h
    src/registration/PoseGraphBuilder.h
    src/registration/FeatureBasedRegistration.h
    src/optimization/BundleAdjustment.h
    src/features/FeatureExtractor.h
    src/analysis/DifferenceAnalysis.h
    # Sprint 6: Export and Quality Assessment Headers
    src/export/IFormatWriter.h
    src/export/FormatWriters/E57Writer.h
    src/export/FormatWriters/LASWriter.h
    src/export/FormatWriters/PLYWriter.h
    src/export/FormatWriters/XYZWriter.h
    src/quality/QualityAssessment.h
    src/quality/PDFReportGenerator.h
    src/crs/CoordinateSystemManager.h
    src/ui/ExportDialog.h
)

# Shader files
set(SHADERS
    shaders/point.vert
    shaders/point.frag
    # Sprint 1: Enhanced shaders
    shaders/pointcloud.vert
    shaders/pointcloud.frag
)

# Resource files
set(RESOURCES
    resources.qrc
)

# Create the executable
add_executable(CloudRegistration ${SOURCES} ${HEADERS} ${RESOURCES})

# Link Qt6 libraries, E57Format, and Eigen3
target_link_libraries(CloudRegistration
    Qt6::Core
    Qt6::Widgets
    Qt6::Gui
    Qt6::OpenGLWidgets
    Qt6::Xml
    Qt6::Sql
    Qt6::Concurrent
    # E57Format  # Temporarily disabled for Sprint 4 testing
    Eigen3::Eigen
)

# Platform-specific linking
if(UNIX AND NOT APPLE)
    # Link additional libraries required on Linux
    target_link_libraries(CloudRegistration
        pthread
        dl
    )

    # Set RPATH for better library loading on Linux
    set_target_properties(CloudRegistration PROPERTIES
        INSTALL_RPATH_USE_LINK_PATH TRUE
        BUILD_WITH_INSTALL_RPATH FALSE
        INSTALL_RPATH "\$ORIGIN:\$ORIGIN/../lib"
    )
elseif(APPLE)
    # macOS-specific linking
    target_link_libraries(CloudRegistration
        "-framework OpenGL"
        "-framework Cocoa"
    )

    # Set RPATH for macOS
    set_target_properties(CloudRegistration PROPERTIES
        INSTALL_RPATH "@executable_path;@executable_path/../lib"
        BUILD_WITH_INSTALL_RPATH FALSE
    )
endif()

# Ensure E57Format include directories are available
# get_target_property(E57_INCLUDE_DIRS E57Format INTERFACE_INCLUDE_DIRECTORIES)  # Temporarily disabled for Sprint 4 testing
# if(E57_INCLUDE_DIRS)
#     target_include_directories(CloudRegistration PRIVATE ${E57_INCLUDE_DIRS})
# endif()



# Copy shader files to build directory
file(COPY ${CMAKE_SOURCE_DIR}/shaders DESTINATION ${CMAKE_BINARY_DIR})

# Set output directory
set_target_properties(CloudRegistration PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin
)

# Enable testing
enable_testing()

# Find Google Test and Google Mock
find_package(GTest CONFIG QUIET)
if(TARGET GTest::gtest_main)
    message(STATUS "Google Test found - building unit tests")

    # Check if Google Mock is available
    if(TARGET GTest::gmock_main)
        message(STATUS "Google Mock found - enabling mock-based tests")
        set(GMOCK_AVAILABLE TRUE)
    else()
        message(WARNING "Google Mock not found - some tests will be disabled")
        set(GMOCK_AVAILABLE FALSE)
    endif()

    # Enable code coverage if requested
    option(ENABLE_COVERAGE "Enable code coverage" OFF)
    if(ENABLE_COVERAGE)
        if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
            message(STATUS "Code coverage enabled")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --coverage -fprofile-arcs -ftest-coverage")
            set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} --coverage")
        else()
            message(WARNING "Code coverage only supported with GCC or Clang")
        endif()
    endif()

    # E57 Parser Tests
    add_executable(E57ParserTests
        tests/test_e57parser.cpp
        src/e57parserlib.cpp
        src/IE57Parser.cpp
        src/performance_profiler.cpp
    )

    target_link_libraries(E57ParserTests
        GTest::gtest_main
        Qt6::Core
        Qt6::Xml
        Qt6::Test
        E57Format
    )

    target_include_directories(E57ParserTests PRIVATE src)
    add_test(NAME E57ParserTests COMMAND E57ParserTests)

    # E57 Parser Library Tests (with interface testing)
    add_executable(E57ParserLibTests
        tests/test_e57parserlib.cpp
        src/e57parserlib.cpp
        src/IE57Parser.cpp
        src/performance_profiler.cpp
    )

    target_link_libraries(E57ParserLibTests
        GTest::gtest_main
        Qt6::Core
        Qt6::Xml
        Qt6::Test
        E57Format
    )

    target_include_directories(E57ParserLibTests PRIVATE src)
    add_test(NAME E57ParserLibTests COMMAND E57ParserLibTests)

    # E57 Parser Core Tests (Sprint 2 - Qt-independent core)
    add_executable(E57ParserCoreTests
        tests/test_e57parsercore.cpp
        src/E57ParserCore.cpp
    )

    target_link_libraries(E57ParserCoreTests
        GTest::gtest_main
        E57Format
    )

    target_include_directories(E57ParserCoreTests PRIVATE src)
    add_test(NAME E57ParserCoreTests COMMAND E57ParserCoreTests)

    # Sprint 2: Registration Workflow Tests
    add_executable(RegistrationWorkflowTests
        tests/test_registration_workflow.cpp
        # src/registration/WorkflowStateMachine.cpp  # To be implemented
        src/registration/Target.cpp
        src/registration/TargetCorrespondence.cpp
        src/registration/TargetManager.cpp
        src/registration/RegistrationProject.cpp
        src/registration/RegistrationWorkflowWidget.cpp
        src/ui/WorkflowProgressWidget.cpp
        src/project.cpp
    )

    target_link_libraries(RegistrationWorkflowTests
        GTest::gtest_main
        Qt6::Core
        Qt6::Widgets
        Qt6::Gui
        Qt6::Test
    )

    target_include_directories(RegistrationWorkflowTests PRIVATE src)
    add_test(NAME RegistrationWorkflowTests COMMAND RegistrationWorkflowTests)






    # LAS Parser Tests
    add_executable(LasParserTests
        tests/test_lasparser.cpp
        src/lasparser.cpp
        src/voxelgridfilter.cpp
        src/performance_profiler.cpp
    )

    target_link_libraries(LasParserTests
        GTest::gtest_main
        Qt6::Core
    )

    target_include_directories(LasParserTests PRIVATE src)
    add_test(NAME LasParserTests COMMAND LasParserTests)

    # VoxelGridFilter Tests
    add_executable(VoxelGridFilterTests
        tests/test_voxelgridfilter.cpp
        src/voxelgridfilter.cpp
        src/performance_profiler.cpp
    )

    target_link_libraries(VoxelGridFilterTests
        GTest::gtest_main
        Qt6::Core
    )

    target_include_directories(VoxelGridFilterTests PRIVATE src)
    add_test(NAME VoxelGridFilterTests COMMAND VoxelGridFilterTests)

    # Project Management Tests
    add_executable(ProjectManagerTests
        tests/test_projectmanager.cpp
        src/projectmanager.cpp
        src/project.cpp
    )

    target_link_libraries(ProjectManagerTests
        GTest::gtest_main
        Qt6::Core
        Qt6::Test
    )

    target_include_directories(ProjectManagerTests PRIVATE src)
    add_test(NAME ProjectManagerTests COMMAND ProjectManagerTests)

    add_executable(RecentProjectsManagerTests
        tests/test_recentprojectsmanager.cpp
        src/recentprojectsmanager.cpp
    )

    target_link_libraries(RecentProjectsManagerTests
        GTest::gtest_main
        Qt6::Core
        Qt6::Test
    )

    target_include_directories(RecentProjectsManagerTests PRIVATE src)
    add_test(NAME RecentProjectsManagerTests COMMAND RecentProjectsManagerTests)

    # Sprint 4: MainPresenter Tests (requires Google Mock)
    if(GMOCK_AVAILABLE)
        add_executable(MainPresenterTests
            tests/test_mainpresenter.cpp
            src/MainPresenter.cpp
            src/IE57Parser.cpp
            src/performance_profiler.cpp
            src/pointcloudloadmanager.cpp
            src/projectmanager.cpp
            src/project.cpp
        )

        target_link_libraries(MainPresenterTests
            GTest::gtest_main
            GTest::gmock_main
            Qt6::Core
            Qt6::Test
        )

        target_include_directories(MainPresenterTests PRIVATE src)
        add_test(NAME MainPresenterTests COMMAND MainPresenterTests)

        # Sprint 6: GPU Culler Tests
        add_executable(GpuCullerTests
            tests/test_gpuculler.cpp
            src/rendering/GpuCuller.cpp
            src/octree.cpp
        )

        target_link_libraries(GpuCullerTests
            GTest::gtest_main
            GTest::gmock_main
            Qt6::Core
            Qt6::Gui
            Qt6::OpenGL
            Qt6::OpenGLWidgets
        )

        target_include_directories(GpuCullerTests PRIVATE src)
        add_test(NAME GpuCullerTests COMMAND GpuCullerTests)
        # Sprint 1: OpenGL Renderer Tests
        add_executable(OpenGLRendererTests
            tests/test_opengl_renderer.cpp
            src/rendering/OpenGLRenderer.cpp
        )

        target_link_libraries(OpenGLRendererTests
            GTest::gtest_main
            Qt6::Core
            Qt6::Gui
            Qt6::OpenGL
            Qt6::OpenGLWidgets
        )

        target_include_directories(OpenGLRendererTests PRIVATE src)
        add_test(NAME OpenGLRendererTests COMMAND OpenGLRendererTests)

        # Sprint 1: Camera Controller Tests
        add_executable(CameraControllerTests
            tests/test_camera_controller.cpp
            src/camera/CameraController.cpp
        )

        target_link_libraries(CameraControllerTests
            GTest::gtest_main
            Qt6::Core
            Qt6::Gui
        )

        target_include_directories(CameraControllerTests PRIVATE src)
        add_test(NAME CameraControllerTests COMMAND CameraControllerTests)

        # Sprint 3: Target Detection and Registration Tests
        add_executable(TargetTests
            tests/test_target.cpp
            src/registration/Target.cpp
        )

        target_link_libraries(TargetTests
            GTest::gtest_main
            Qt6::Core
        )

        target_include_directories(TargetTests PRIVATE src)
        add_test(NAME TargetTests COMMAND TargetTests)

        add_executable(TargetManagerTests
            tests/test_targetmanager.cpp
            src/registration/TargetManager.cpp
            src/registration/Target.cpp
        )

        target_link_libraries(TargetManagerTests
            GTest::gtest_main
            Qt6::Core
        )

        target_include_directories(TargetManagerTests PRIVATE src)
        add_test(NAME TargetManagerTests COMMAND TargetManagerTests)

        add_executable(SphereDetectorTests
            tests/test_spheredetector.cpp
            src/detection/SphereDetector.cpp
            src/detection/TargetDetectionBase.cpp
            src/registration/Target.cpp
        )

        target_link_libraries(SphereDetectorTests
            GTest::gtest_main
            Qt6::Core
        )

        target_include_directories(SphereDetectorTests PRIVATE src)
        add_test(NAME SphereDetectorTests COMMAND SphereDetectorTests)

        add_executable(NaturalPointSelectorTests
            tests/test_naturalpointselector.cpp
            src/detection/NaturalPointSelector.cpp
            src/detection/TargetDetectionBase.cpp
            src/registration/Target.cpp
        )

        target_link_libraries(NaturalPointSelectorTests
            GTest::gtest_main
            Qt6::Core
        )

        target_include_directories(NaturalPointSelectorTests PRIVATE src)
        add_test(NAME NaturalPointSelectorTests COMMAND NaturalPointSelectorTests)

        # Sprint 5: ICP Registration Tests
        add_executable(ICPRegistrationTests
            tests/test_icp_registration.cpp
            src/algorithms/ICPRegistration.cpp
            src/algorithms/LeastSquaresAlignment.cpp
            src/registration/AlignmentEngine.cpp
            src/ui/ICPProgressWidget.cpp
        )

        target_link_libraries(ICPRegistrationTests
            GTest::gtest_main
            GTest::gmock_main
            Qt6::Core
            Qt6::Widgets
            Qt6::Test
        )

        target_include_directories(ICPRegistrationTests PRIVATE src)
        add_test(NAME ICPRegistrationTests COMMAND ICPRegistrationTests)

        # Sprint 5: Point-to-Plane ICP Tests
        add_executable(PointToPlaneICPTests
            tests/test_point_to_plane_icp.cpp
            src/algorithms/ICPRegistration.cpp
            src/algorithms/PointToPlaneICP.cpp
            src/algorithms/LeastSquaresAlignment.cpp
        )

        target_link_libraries(PointToPlaneICPTests
            GTest::gtest_main
            Qt6::Core
            Qt6::Test
        )

        target_include_directories(PointToPlaneICPTests PRIVATE src)
        add_test(NAME PointToPlaneICPTests COMMAND PointToPlaneICPTests)

        # Sprint 7: Performance Optimization Tests
        add_executable(PerformanceOptimizationTests
            tests/test_performance_optimization.cpp
            src/performance/MemoryManager.cpp
            # src/performance/ParallelProcessing.cpp  # To be implemented
        )

        target_link_libraries(PerformanceOptimizationTests
            GTest::gtest_main
            GTest::gmock_main
            Qt6::Core
            Qt6::Test
            Qt6::Concurrent
        )

        target_include_directories(PerformanceOptimizationTests PRIVATE src)
        add_test(NAME PerformanceOptimizationTests COMMAND PerformanceOptimizationTests)

        # Sprint 7: UI Enhancement Tests
        add_executable(UIEnhancementTests
            tests/test_ui_enhancement.cpp
            src/ui/UIThemeManager.cpp
            src/ui/UserPreferences.cpp
        )

        target_link_libraries(UIEnhancementTests
            GTest::gtest_main
            GTest::gmock_main
            Qt6::Core
            Qt6::Widgets
            Qt6::Gui
            Qt6::Test
        )

        target_include_directories(UIEnhancementTests PRIVATE src)
        add_test(NAME UIEnhancementTests COMMAND UIEnhancementTests)

        # Sprint 8: End-to-End Integration Tests
        add_executable(EndToEndTests
            tests/integration/end_to_end_testing.cpp
            src/MainPresenter.cpp
            src/IE57Parser.cpp
            src/e57parserlib.cpp
            src/lasparser.cpp
            src/performance_profiler.cpp
            src/pointcloudloadmanager.cpp
            src/projectmanager.cpp
            src/project.cpp
            src/voxelgridfilter.cpp
        )

        target_link_libraries(EndToEndTests
            GTest::gtest_main
            GTest::gmock_main
            Qt6::Core
            Qt6::Gui
            Qt6::Test
            E57Format
        )

        target_include_directories(EndToEndTests PRIVATE src)
        add_test(NAME EndToEndTests COMMAND EndToEndTests)

        # Sprint 9: Advanced Registration Tests
        add_executable(Sprint9RegistrationTests
            tests/test_sprint9_registration.cpp
            src/registration/PoseGraph.cpp
            src/registration/PoseGraphBuilder.cpp
            src/optimization/BundleAdjustment.cpp
            src/features/FeatureExtractor.cpp
            src/registration/FeatureBasedRegistration.cpp
            src/analysis/DifferenceAnalysis.cpp
        )

        target_link_libraries(Sprint9RegistrationTests
            GTest::gtest_main
            GTest::gmock_main
            Qt6::Core
            Qt6::Gui
            Qt6::Test
        )

        target_include_directories(Sprint9RegistrationTests PRIVATE src)
        add_test(NAME Sprint9RegistrationTests COMMAND Sprint9RegistrationTests)

        set(ALL_TESTS E57ParserTests E57ParserLibTests E57ParserCoreTests RegistrationWorkflowTests LasParserTests VoxelGridFilterTests ProjectManagerTests RecentProjectsManagerTests MainPresenterTests GpuCullerTests OpenGLRendererTests CameraControllerTests TargetTests TargetManagerTests SphereDetectorTests NaturalPointSelectorTests ICPRegistrationTests PointToPlaneICPTests PerformanceOptimizationTests UIEnhancementTests EndToEndTests Sprint9RegistrationTests)

    else()
        # Sprint 1: OpenGL Renderer Tests (without mock dependencies)
        add_executable(OpenGLRendererTests
            tests/test_opengl_renderer.cpp
            src/rendering/OpenGLRenderer.cpp
        )

        target_link_libraries(OpenGLRendererTests
            GTest::gtest_main
            Qt6::Core
            Qt6::Gui
            Qt6::OpenGL
            Qt6::OpenGLWidgets
        )

        target_include_directories(OpenGLRendererTests PRIVATE src)
        add_test(NAME OpenGLRendererTests COMMAND OpenGLRendererTests)

        # Sprint 1: Camera Controller Tests (without mock dependencies)
        add_executable(CameraControllerTests
            tests/test_camera_controller.cpp
            src/camera/CameraController.cpp
        )

        target_link_libraries(CameraControllerTests
            GTest::gtest_main
            Qt6::Core
            Qt6::Gui
        )

        target_include_directories(CameraControllerTests PRIVATE src)
        add_test(NAME CameraControllerTests COMMAND CameraControllerTests)

        # Sprint 3: Target Detection and Registration Tests (without mock dependencies)
        add_executable(TargetTests
            tests/test_target.cpp
            src/registration/Target.cpp
        )

        target_link_libraries(TargetTests
            GTest::gtest_main
            Qt6::Core
        )

        target_include_directories(TargetTests PRIVATE src)
        add_test(NAME TargetTests COMMAND TargetTests)

        add_executable(TargetManagerTests
            tests/test_targetmanager.cpp
            src/registration/TargetManager.cpp
            src/registration/Target.cpp
        )

        target_link_libraries(TargetManagerTests
            GTest::gtest_main
            Qt6::Core
        )

        target_include_directories(TargetManagerTests PRIVATE src)
        add_test(NAME TargetManagerTests COMMAND TargetManagerTests)

        add_executable(SphereDetectorTests
            tests/test_spheredetector.cpp
            src/detection/SphereDetector.cpp
            src/detection/TargetDetectionBase.cpp
            src/registration/Target.cpp
        )

        target_link_libraries(SphereDetectorTests
            GTest::gtest_main
            Qt6::Core
        )

        target_include_directories(SphereDetectorTests PRIVATE src)
        add_test(NAME SphereDetectorTests COMMAND SphereDetectorTests)

        add_executable(NaturalPointSelectorTests
            tests/test_naturalpointselector.cpp
            src/detection/NaturalPointSelector.cpp
            src/detection/TargetDetectionBase.cpp
            src/registration/Target.cpp
        )

        target_link_libraries(NaturalPointSelectorTests
            GTest::gtest_main
            Qt6::Core
        )

        target_include_directories(NaturalPointSelectorTests PRIVATE src)
        add_test(NAME NaturalPointSelectorTests COMMAND NaturalPointSelectorTests)

        # Sprint 5: Point-to-Plane ICP Tests (without Google Mock)
        add_executable(PointToPlaneICPTests
            tests/test_point_to_plane_icp.cpp
            src/algorithms/ICPRegistration.cpp
            src/algorithms/PointToPlaneICP.cpp
            src/algorithms/LeastSquaresAlignment.cpp
        )

        target_link_libraries(PointToPlaneICPTests
            GTest::gtest_main
            Qt6::Core
            Qt6::Test
        )

        target_include_directories(PointToPlaneICPTests PRIVATE src)
        add_test(NAME PointToPlaneICPTests COMMAND PointToPlaneICPTests)

        # Sprint 7: Performance Optimization Tests (without Google Mock)
        add_executable(PerformanceOptimizationTests
            tests/test_performance_optimization.cpp
            src/performance/MemoryManager.cpp
            # src/performance/ParallelProcessing.cpp  # To be implemented
        )

        target_link_libraries(PerformanceOptimizationTests
            GTest::gtest_main
            Qt6::Core
            Qt6::Test
            Qt6::Concurrent
        )

        target_include_directories(PerformanceOptimizationTests PRIVATE src)
        add_test(NAME PerformanceOptimizationTests COMMAND PerformanceOptimizationTests)

        # Sprint 7: UI Enhancement Tests (without Google Mock)
        add_executable(UIEnhancementTests
            tests/test_ui_enhancement.cpp
            src/ui/UIThemeManager.cpp
            src/ui/UserPreferences.cpp
        )

        target_link_libraries(UIEnhancementTests
            GTest::gtest_main
            Qt6::Core
            Qt6::Widgets
            Qt6::Gui
            Qt6::Test
        )

        target_include_directories(UIEnhancementTests PRIVATE src)
        add_test(NAME UIEnhancementTests COMMAND UIEnhancementTests)

        # Sprint 8: End-to-End Integration Tests (without Google Mock)
        add_executable(EndToEndTests
            tests/integration/end_to_end_testing.cpp
            src/MainPresenter.cpp
            src/IE57Parser.cpp
            src/e57parserlib.cpp
            src/lasparser.cpp
            src/performance_profiler.cpp
            src/pointcloudloadmanager.cpp
            src/projectmanager.cpp
            src/project.cpp
            src/voxelgridfilter.cpp
        )

        target_link_libraries(EndToEndTests
            GTest::gtest_main
            Qt6::Core
            Qt6::Gui
            Qt6::Test
            E57Format
        )

        target_include_directories(EndToEndTests PRIVATE src)
        add_test(NAME EndToEndTests COMMAND EndToEndTests)

        set(ALL_TESTS E57ParserTests E57ParserLibTests E57ParserCoreTests RegistrationWorkflowTests LasParserTests VoxelGridFilterTests ProjectManagerTests RecentProjectsManagerTests OpenGLRendererTests CameraControllerTests TargetTests TargetManagerTests SphereDetectorTests NaturalPointSelectorTests PointToPlaneICPTests PerformanceOptimizationTests UIEnhancementTests EndToEndTests)
    endif()

    # Custom target to run all tests
    add_custom_target(run_tests
        COMMAND ${CMAKE_CTEST_COMMAND} --output-on-failure
        DEPENDS ${ALL_TESTS}
        COMMENT "Running all unit tests"
    )

    # Code coverage target (if enabled)
    if(ENABLE_COVERAGE)
        find_program(LCOV_PATH lcov)
        find_program(GENHTML_PATH genhtml)

        if(LCOV_PATH AND GENHTML_PATH)
            add_custom_target(coverage
                COMMAND ${LCOV_PATH} --directory . --zerocounters
                COMMAND ${CMAKE_CTEST_COMMAND} --output-on-failure
                COMMAND ${LCOV_PATH} --directory . --capture --output-file coverage.info
                COMMAND ${LCOV_PATH} --remove coverage.info '/usr/*' '*/tests/*' '*/build/*' --output-file coverage.info.cleaned
                COMMAND ${GENHTML_PATH} -o coverage_html coverage.info.cleaned
                COMMAND ${CMAKE_COMMAND} -E remove coverage.info coverage.info.cleaned
                WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
                DEPENDS ${ALL_TESTS}
                COMMENT "Generating code coverage report"
            )
            message(STATUS "Code coverage target 'coverage' available")
        else()
            message(WARNING "lcov and/or genhtml not found - coverage target not available")
        endif()
    endif()

else()
    message(STATUS "Google Test not found - unit tests will not be built")
    message(STATUS "To install Google Test on Ubuntu/Debian: sudo apt-get install libgtest-dev")
    message(STATUS "To install Google Test on Windows: vcpkg install gtest")
endif()
