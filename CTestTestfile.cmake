# CMake generated Testfile for 
# Source directory: C:/dev/cloud_registration
# Build directory: C:/dev/cloud_registration
# 
# This file includes the relevant testing commands required for 
# testing this directory and lists subdirectories to be tested as well.
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(E57ParserTests "C:/dev/cloud_registration/bin/Debug/E57ParserTests.exe")
  set_tests_properties(E57ParserTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;465;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(E57ParserTests "C:/dev/cloud_registration/bin/Release/E57ParserTests.exe")
  set_tests_properties(E57ParserTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;465;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(E57ParserTests "C:/dev/cloud_registration/MinSizeRel/E57ParserTests.exe")
  set_tests_properties(E57ParserTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;465;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(E57ParserTests "C:/dev/cloud_registration/RelWithDebInfo/E57ParserTests.exe")
  set_tests_properties(E57ParserTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;465;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
else()
  add_test(E57ParserTests NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(E57ParserLibTests "C:/dev/cloud_registration/bin/Debug/E57ParserLibTests.exe")
  set_tests_properties(E57ParserLibTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;484;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(E57ParserLibTests "C:/dev/cloud_registration/bin/Release/E57ParserLibTests.exe")
  set_tests_properties(E57ParserLibTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;484;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(E57ParserLibTests "C:/dev/cloud_registration/MinSizeRel/E57ParserLibTests.exe")
  set_tests_properties(E57ParserLibTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;484;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(E57ParserLibTests "C:/dev/cloud_registration/RelWithDebInfo/E57ParserLibTests.exe")
  set_tests_properties(E57ParserLibTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;484;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
else()
  add_test(E57ParserLibTests NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(E57ParserCoreTests "C:/dev/cloud_registration/bin/Debug/E57ParserCoreTests.exe")
  set_tests_properties(E57ParserCoreTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;498;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(E57ParserCoreTests "C:/dev/cloud_registration/bin/Release/E57ParserCoreTests.exe")
  set_tests_properties(E57ParserCoreTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;498;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(E57ParserCoreTests "C:/dev/cloud_registration/MinSizeRel/E57ParserCoreTests.exe")
  set_tests_properties(E57ParserCoreTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;498;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(E57ParserCoreTests "C:/dev/cloud_registration/RelWithDebInfo/E57ParserCoreTests.exe")
  set_tests_properties(E57ParserCoreTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;498;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
else()
  add_test(E57ParserCoreTests NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(RegistrationWorkflowTests "C:/dev/cloud_registration/bin/Debug/RegistrationWorkflowTests.exe")
  set_tests_properties(RegistrationWorkflowTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;522;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(RegistrationWorkflowTests "C:/dev/cloud_registration/bin/Release/RegistrationWorkflowTests.exe")
  set_tests_properties(RegistrationWorkflowTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;522;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(RegistrationWorkflowTests "C:/dev/cloud_registration/MinSizeRel/RegistrationWorkflowTests.exe")
  set_tests_properties(RegistrationWorkflowTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;522;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(RegistrationWorkflowTests "C:/dev/cloud_registration/RelWithDebInfo/RegistrationWorkflowTests.exe")
  set_tests_properties(RegistrationWorkflowTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;522;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
else()
  add_test(RegistrationWorkflowTests NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(LasParserTests "C:/dev/cloud_registration/bin/Debug/LasParserTests.exe")
  set_tests_properties(LasParserTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;543;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(LasParserTests "C:/dev/cloud_registration/bin/Release/LasParserTests.exe")
  set_tests_properties(LasParserTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;543;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(LasParserTests "C:/dev/cloud_registration/MinSizeRel/LasParserTests.exe")
  set_tests_properties(LasParserTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;543;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(LasParserTests "C:/dev/cloud_registration/RelWithDebInfo/LasParserTests.exe")
  set_tests_properties(LasParserTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;543;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
else()
  add_test(LasParserTests NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(VoxelGridFilterTests "C:/dev/cloud_registration/bin/Debug/VoxelGridFilterTests.exe")
  set_tests_properties(VoxelGridFilterTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;558;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(VoxelGridFilterTests "C:/dev/cloud_registration/bin/Release/VoxelGridFilterTests.exe")
  set_tests_properties(VoxelGridFilterTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;558;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(VoxelGridFilterTests "C:/dev/cloud_registration/MinSizeRel/VoxelGridFilterTests.exe")
  set_tests_properties(VoxelGridFilterTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;558;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(VoxelGridFilterTests "C:/dev/cloud_registration/RelWithDebInfo/VoxelGridFilterTests.exe")
  set_tests_properties(VoxelGridFilterTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;558;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
else()
  add_test(VoxelGridFilterTests NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(ProjectManagerTests "C:/dev/cloud_registration/bin/Debug/ProjectManagerTests.exe")
  set_tests_properties(ProjectManagerTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;574;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(ProjectManagerTests "C:/dev/cloud_registration/bin/Release/ProjectManagerTests.exe")
  set_tests_properties(ProjectManagerTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;574;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(ProjectManagerTests "C:/dev/cloud_registration/MinSizeRel/ProjectManagerTests.exe")
  set_tests_properties(ProjectManagerTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;574;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(ProjectManagerTests "C:/dev/cloud_registration/RelWithDebInfo/ProjectManagerTests.exe")
  set_tests_properties(ProjectManagerTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;574;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
else()
  add_test(ProjectManagerTests NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(RecentProjectsManagerTests "C:/dev/cloud_registration/bin/Debug/RecentProjectsManagerTests.exe")
  set_tests_properties(RecentProjectsManagerTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;588;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(RecentProjectsManagerTests "C:/dev/cloud_registration/bin/Release/RecentProjectsManagerTests.exe")
  set_tests_properties(RecentProjectsManagerTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;588;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(RecentProjectsManagerTests "C:/dev/cloud_registration/MinSizeRel/RecentProjectsManagerTests.exe")
  set_tests_properties(RecentProjectsManagerTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;588;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(RecentProjectsManagerTests "C:/dev/cloud_registration/RelWithDebInfo/RecentProjectsManagerTests.exe")
  set_tests_properties(RecentProjectsManagerTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;588;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
else()
  add_test(RecentProjectsManagerTests NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(MainPresenterTests "C:/dev/cloud_registration/bin/Debug/MainPresenterTests.exe")
  set_tests_properties(MainPresenterTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;610;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(MainPresenterTests "C:/dev/cloud_registration/bin/Release/MainPresenterTests.exe")
  set_tests_properties(MainPresenterTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;610;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(MainPresenterTests "C:/dev/cloud_registration/MinSizeRel/MainPresenterTests.exe")
  set_tests_properties(MainPresenterTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;610;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(MainPresenterTests "C:/dev/cloud_registration/RelWithDebInfo/MainPresenterTests.exe")
  set_tests_properties(MainPresenterTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;610;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
else()
  add_test(MainPresenterTests NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(GpuCullerTests "C:/dev/cloud_registration/bin/Debug/GpuCullerTests.exe")
  set_tests_properties(GpuCullerTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;629;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(GpuCullerTests "C:/dev/cloud_registration/bin/Release/GpuCullerTests.exe")
  set_tests_properties(GpuCullerTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;629;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(GpuCullerTests "C:/dev/cloud_registration/MinSizeRel/GpuCullerTests.exe")
  set_tests_properties(GpuCullerTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;629;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(GpuCullerTests "C:/dev/cloud_registration/RelWithDebInfo/GpuCullerTests.exe")
  set_tests_properties(GpuCullerTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;629;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
else()
  add_test(GpuCullerTests NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(OpenGLRendererTests "C:/dev/cloud_registration/bin/Debug/OpenGLRendererTests.exe")
  set_tests_properties(OpenGLRendererTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;645;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(OpenGLRendererTests "C:/dev/cloud_registration/bin/Release/OpenGLRendererTests.exe")
  set_tests_properties(OpenGLRendererTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;645;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(OpenGLRendererTests "C:/dev/cloud_registration/MinSizeRel/OpenGLRendererTests.exe")
  set_tests_properties(OpenGLRendererTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;645;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(OpenGLRendererTests "C:/dev/cloud_registration/RelWithDebInfo/OpenGLRendererTests.exe")
  set_tests_properties(OpenGLRendererTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;645;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
else()
  add_test(OpenGLRendererTests NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(CameraControllerTests "C:/dev/cloud_registration/bin/Debug/CameraControllerTests.exe")
  set_tests_properties(CameraControllerTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;660;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(CameraControllerTests "C:/dev/cloud_registration/bin/Release/CameraControllerTests.exe")
  set_tests_properties(CameraControllerTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;660;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(CameraControllerTests "C:/dev/cloud_registration/MinSizeRel/CameraControllerTests.exe")
  set_tests_properties(CameraControllerTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;660;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(CameraControllerTests "C:/dev/cloud_registration/RelWithDebInfo/CameraControllerTests.exe")
  set_tests_properties(CameraControllerTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;660;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
else()
  add_test(CameraControllerTests NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(TargetTests "C:/dev/cloud_registration/bin/Debug/TargetTests.exe")
  set_tests_properties(TargetTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;674;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(TargetTests "C:/dev/cloud_registration/bin/Release/TargetTests.exe")
  set_tests_properties(TargetTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;674;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(TargetTests "C:/dev/cloud_registration/MinSizeRel/TargetTests.exe")
  set_tests_properties(TargetTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;674;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(TargetTests "C:/dev/cloud_registration/RelWithDebInfo/TargetTests.exe")
  set_tests_properties(TargetTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;674;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
else()
  add_test(TargetTests NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(TargetManagerTests "C:/dev/cloud_registration/bin/Debug/TargetManagerTests.exe")
  set_tests_properties(TargetManagerTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;688;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(TargetManagerTests "C:/dev/cloud_registration/bin/Release/TargetManagerTests.exe")
  set_tests_properties(TargetManagerTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;688;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(TargetManagerTests "C:/dev/cloud_registration/MinSizeRel/TargetManagerTests.exe")
  set_tests_properties(TargetManagerTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;688;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(TargetManagerTests "C:/dev/cloud_registration/RelWithDebInfo/TargetManagerTests.exe")
  set_tests_properties(TargetManagerTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;688;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
else()
  add_test(TargetManagerTests NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(SphereDetectorTests "C:/dev/cloud_registration/bin/Debug/SphereDetectorTests.exe")
  set_tests_properties(SphereDetectorTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;703;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(SphereDetectorTests "C:/dev/cloud_registration/bin/Release/SphereDetectorTests.exe")
  set_tests_properties(SphereDetectorTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;703;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(SphereDetectorTests "C:/dev/cloud_registration/MinSizeRel/SphereDetectorTests.exe")
  set_tests_properties(SphereDetectorTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;703;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(SphereDetectorTests "C:/dev/cloud_registration/RelWithDebInfo/SphereDetectorTests.exe")
  set_tests_properties(SphereDetectorTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;703;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
else()
  add_test(SphereDetectorTests NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(NaturalPointSelectorTests "C:/dev/cloud_registration/bin/Debug/NaturalPointSelectorTests.exe")
  set_tests_properties(NaturalPointSelectorTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;718;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(NaturalPointSelectorTests "C:/dev/cloud_registration/bin/Release/NaturalPointSelectorTests.exe")
  set_tests_properties(NaturalPointSelectorTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;718;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(NaturalPointSelectorTests "C:/dev/cloud_registration/MinSizeRel/NaturalPointSelectorTests.exe")
  set_tests_properties(NaturalPointSelectorTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;718;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(NaturalPointSelectorTests "C:/dev/cloud_registration/RelWithDebInfo/NaturalPointSelectorTests.exe")
  set_tests_properties(NaturalPointSelectorTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;718;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
else()
  add_test(NaturalPointSelectorTests NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(ICPRegistrationTests "C:/dev/cloud_registration/bin/Debug/ICPRegistrationTests.exe")
  set_tests_properties(ICPRegistrationTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;738;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(ICPRegistrationTests "C:/dev/cloud_registration/bin/Release/ICPRegistrationTests.exe")
  set_tests_properties(ICPRegistrationTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;738;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(ICPRegistrationTests "C:/dev/cloud_registration/MinSizeRel/ICPRegistrationTests.exe")
  set_tests_properties(ICPRegistrationTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;738;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(ICPRegistrationTests "C:/dev/cloud_registration/RelWithDebInfo/ICPRegistrationTests.exe")
  set_tests_properties(ICPRegistrationTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;738;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
else()
  add_test(ICPRegistrationTests NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(PointToPlaneICPTests "C:/dev/cloud_registration/bin/Debug/PointToPlaneICPTests.exe")
  set_tests_properties(PointToPlaneICPTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;755;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(PointToPlaneICPTests "C:/dev/cloud_registration/bin/Release/PointToPlaneICPTests.exe")
  set_tests_properties(PointToPlaneICPTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;755;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(PointToPlaneICPTests "C:/dev/cloud_registration/MinSizeRel/PointToPlaneICPTests.exe")
  set_tests_properties(PointToPlaneICPTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;755;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(PointToPlaneICPTests "C:/dev/cloud_registration/RelWithDebInfo/PointToPlaneICPTests.exe")
  set_tests_properties(PointToPlaneICPTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;755;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
else()
  add_test(PointToPlaneICPTests NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(PerformanceOptimizationTests "C:/dev/cloud_registration/bin/Debug/PerformanceOptimizationTests.exe")
  set_tests_properties(PerformanceOptimizationTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;773;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(PerformanceOptimizationTests "C:/dev/cloud_registration/bin/Release/PerformanceOptimizationTests.exe")
  set_tests_properties(PerformanceOptimizationTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;773;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(PerformanceOptimizationTests "C:/dev/cloud_registration/MinSizeRel/PerformanceOptimizationTests.exe")
  set_tests_properties(PerformanceOptimizationTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;773;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(PerformanceOptimizationTests "C:/dev/cloud_registration/RelWithDebInfo/PerformanceOptimizationTests.exe")
  set_tests_properties(PerformanceOptimizationTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;773;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
else()
  add_test(PerformanceOptimizationTests NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(UIEnhancementTests "C:/dev/cloud_registration/bin/Debug/UIEnhancementTests.exe")
  set_tests_properties(UIEnhancementTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;792;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(UIEnhancementTests "C:/dev/cloud_registration/bin/Release/UIEnhancementTests.exe")
  set_tests_properties(UIEnhancementTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;792;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(UIEnhancementTests "C:/dev/cloud_registration/MinSizeRel/UIEnhancementTests.exe")
  set_tests_properties(UIEnhancementTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;792;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(UIEnhancementTests "C:/dev/cloud_registration/RelWithDebInfo/UIEnhancementTests.exe")
  set_tests_properties(UIEnhancementTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;792;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
else()
  add_test(UIEnhancementTests NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(EndToEndTests "C:/dev/cloud_registration/bin/Debug/EndToEndTests.exe")
  set_tests_properties(EndToEndTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;818;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(EndToEndTests "C:/dev/cloud_registration/bin/Release/EndToEndTests.exe")
  set_tests_properties(EndToEndTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;818;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(EndToEndTests "C:/dev/cloud_registration/MinSizeRel/EndToEndTests.exe")
  set_tests_properties(EndToEndTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;818;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(EndToEndTests "C:/dev/cloud_registration/RelWithDebInfo/EndToEndTests.exe")
  set_tests_properties(EndToEndTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;818;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
else()
  add_test(EndToEndTests NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(Sprint9RegistrationTests "C:/dev/cloud_registration/bin/Debug/Sprint9RegistrationTests.exe")
  set_tests_properties(Sprint9RegistrationTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;840;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(Sprint9RegistrationTests "C:/dev/cloud_registration/bin/Release/Sprint9RegistrationTests.exe")
  set_tests_properties(Sprint9RegistrationTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;840;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(Sprint9RegistrationTests "C:/dev/cloud_registration/MinSizeRel/Sprint9RegistrationTests.exe")
  set_tests_properties(Sprint9RegistrationTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;840;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(Sprint9RegistrationTests "C:/dev/cloud_registration/RelWithDebInfo/Sprint9RegistrationTests.exe")
  set_tests_properties(Sprint9RegistrationTests PROPERTIES  _BACKTRACE_TRIPLES "C:/dev/cloud_registration/CMakeLists.txt;840;add_test;C:/dev/cloud_registration/CMakeLists.txt;0;")
else()
  add_test(Sprint9RegistrationTests NOT_AVAILABLE)
endif()
