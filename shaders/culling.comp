#version 430

// Sprint 6: GPU-based culling compute shader for high-performance point cloud rendering
// This shader performs frustum and occlusion culling on octree nodes to achieve
// interactive frame rates with massive datasets (50+ million points)

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

// Culling node structure (must match C++ CullingNode)
struct CullingNode {
    vec3 minBounds;
    float padding1;
    vec3 maxBounds;
    float padding2;
    uint nodeIndex;
    uint pointCount;
    uint childMask;
    uint padding3;
};

// Culling parameters (must match C++ CullingParams)
layout(std140, binding = 2) uniform CullingParams {
    mat4 viewProjectionMatrix;
    vec3 cameraPosition;
    float nearPlane;
    float farPlane;
    float screenSpaceErrorThreshold;
    uint viewportWidth;
    uint viewportHeight;
    uint maxNodes;
};

// Input: Octree nodes to test
layout(std430, binding = 0) readonly buffer NodeBuffer {
    CullingNode nodes[];
};

// Output: Visible node indices and point counts
layout(std430, binding = 1) writeonly buffer ResultBuffer {
    uint visibleNodeCount;
    uint visibleNodeIndices[1000000];  // First part: node indices
    uint visiblePointCounts[1000000];  // Second part: point counts
};

// Shared memory for work group results
shared uint localVisibleCount;
shared uint localVisibleIndices[64];
shared uint localVisibleCounts[64];

// Extract frustum planes from view-projection matrix
void extractFrustumPlanes(mat4 mvp, out vec4 planes[6]) {
    // Left plane
    planes[0] = vec4(mvp[0][3] + mvp[0][0], mvp[1][3] + mvp[1][0], 
                     mvp[2][3] + mvp[2][0], mvp[3][3] + mvp[3][0]);
    
    // Right plane
    planes[1] = vec4(mvp[0][3] - mvp[0][0], mvp[1][3] - mvp[1][0], 
                     mvp[2][3] - mvp[2][0], mvp[3][3] - mvp[3][0]);
    
    // Bottom plane
    planes[2] = vec4(mvp[0][3] + mvp[0][1], mvp[1][3] + mvp[1][1], 
                     mvp[2][3] + mvp[2][1], mvp[3][3] + mvp[3][1]);
    
    // Top plane
    planes[3] = vec4(mvp[0][3] - mvp[0][1], mvp[1][3] - mvp[1][1], 
                     mvp[2][3] - mvp[2][1], mvp[3][3] - mvp[3][1]);
    
    // Near plane
    planes[4] = vec4(mvp[0][3] + mvp[0][2], mvp[1][3] + mvp[1][2], 
                     mvp[2][3] + mvp[2][2], mvp[3][3] + mvp[3][2]);
    
    // Far plane
    planes[5] = vec4(mvp[0][3] - mvp[0][2], mvp[1][3] - mvp[1][2], 
                     mvp[2][3] - mvp[2][2], mvp[3][3] - mvp[3][2]);
    
    // Normalize planes
    for (int i = 0; i < 6; i++) {
        float length = length(planes[i].xyz);
        if (length > 0.0) {
            planes[i] /= length;
        }
    }
}

// Test if AABB intersects frustum
bool frustumCullAABB(vec3 minBounds, vec3 maxBounds, vec4 planes[6]) {
    for (int i = 0; i < 6; i++) {
        vec3 normal = planes[i].xyz;
        float distance = planes[i].w;
        
        // Find the positive vertex (farthest along plane normal)
        vec3 positiveVertex = mix(minBounds, maxBounds, greaterThan(normal, vec3(0.0)));
        
        // If positive vertex is behind plane, AABB is completely outside
        if (dot(normal, positiveVertex) + distance < 0.0) {
            return false;
        }
    }
    return true;
}

// Calculate screen-space error for LOD
float calculateScreenSpaceError(vec3 minBounds, vec3 maxBounds) {
    // Calculate AABB center and size
    vec3 center = (minBounds + maxBounds) * 0.5;
    vec3 size = maxBounds - minBounds;
    float radius = length(size) * 0.5;
    
    // Distance from camera to AABB center
    float distance = length(center - cameraPosition);
    
    // Avoid division by zero
    if (distance < 0.001) {
        return 1000.0; // Very high error for very close objects
    }
    
    // Project radius to screen space
    float projectedRadius = (radius * float(viewportHeight)) / (distance * 2.0);
    
    return projectedRadius;
}

// Test if node should be culled based on screen-space error
bool screenSpaceErrorCull(vec3 minBounds, vec3 maxBounds) {
    float screenSpaceError = calculateScreenSpaceError(minBounds, maxBounds);
    return screenSpaceError < screenSpaceErrorThreshold;
}

// Simple occlusion culling using depth buffer (placeholder for future enhancement)
bool occlusionCull(vec3 minBounds, vec3 maxBounds) {
    // For now, just return false (no occlusion)
    // Future enhancement: implement hierarchical Z-buffer occlusion culling
    return false;
}

void main() {
    uint nodeIndex = gl_GlobalInvocationID.x;
    uint localIndex = gl_LocalInvocationID.x;
    
    // Initialize shared memory
    if (localIndex == 0) {
        localVisibleCount = 0;
    }
    barrier();
    
    bool isVisible = false;
    uint pointCount = 0;
    
    // Process node if within bounds
    if (nodeIndex < maxNodes && nodeIndex < nodes.length()) {
        CullingNode node = nodes[nodeIndex];
        
        // Extract frustum planes
        vec4 frustumPlanes[6];
        extractFrustumPlanes(viewProjectionMatrix, frustumPlanes);
        
        // Perform frustum culling
        if (frustumCullAABB(node.minBounds, node.maxBounds, frustumPlanes)) {
            // Perform screen-space error culling
            if (!screenSpaceErrorCull(node.minBounds, node.maxBounds)) {
                // Perform occlusion culling (if enabled)
                if (!occlusionCull(node.minBounds, node.maxBounds)) {
                    isVisible = true;
                    pointCount = node.pointCount;
                }
            }
        }
    }
    
    // Store visible nodes in shared memory
    if (isVisible) {
        uint localVisibleIndex = atomicAdd(localVisibleCount, 1);
        if (localVisibleIndex < 64) {
            localVisibleIndices[localVisibleIndex] = nodeIndex;
            localVisibleCounts[localVisibleIndex] = pointCount;
        }
    }
    
    barrier();
    
    // Write results to global memory (one thread per work group)
    if (localIndex == 0) {
        uint globalOffset = atomicAdd(visibleNodeCount, localVisibleCount);
        
        for (uint i = 0; i < localVisibleCount && i < 64; i++) {
            uint globalIndex = globalOffset + i;
            if (globalIndex < maxNodes) {
                visibleNodeIndices[globalIndex] = localVisibleIndices[i];
                visiblePointCounts[globalIndex] = localVisibleCounts[i];
            }
        }
    }
}
