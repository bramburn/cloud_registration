#include "XYZWriter.h"
#include <QDebug>
#include <QDateTime>

XYZWriter::XYZWriter(Format format) : m_format(format)
{
}

XYZWriter::~XYZWriter()
{
    if (m_isOpen) {
        close();
    }
}

bool XYZWriter::open(const QString& path)
{
    if (m_isOpen) {
        qWarning() << "XYZWriter: File already open";
        return false;
    }
    
    m_file = std::make_unique<QFile>(path);
    if (!m_file->open(QIODevice::WriteOnly | QIODevice::Text)) {
        qWarning() << "XYZWriter: Failed to open file:" << path;
        return false;
    }
    
    m_stream = std::make_unique<QTextStream>(m_file.get());
    m_stream->setEncoding(QStringConverter::Utf8);
    m_stream->setRealNumberPrecision(m_precision);
    m_stream->setRealNumberNotation(QTextStream::FixedNotation);
    
    m_pointsWritten = 0;
    m_isOpen = true;
    
    qDebug() << "XYZWriter: Opened file for writing:" << path;
    return true;
}

bool XYZWriter::writeHeader(const HeaderInfo& info)
{
    if (!m_isOpen) {
        qWarning() << "XYZWriter: File not open";
        return false;
    }
    
    m_headerInfo = info;
    
    if (m_writeHeaderComment) {
        writeHeaderComment();
    }
    
    qDebug() << "XYZWriter: Header written for" << info.pointCount << "points";
    return true;
}

bool XYZWriter::writePoint(const Point& point)
{
    if (!m_isOpen) {
        qWarning() << "XYZWriter: File not open";
        return false;
    }
    
    // Write coordinates
    *m_stream << point.x << m_separator << point.y << m_separator << point.z;
    
    // Write additional data based on format
    switch (m_format) {
        case Format::XYZ:
            // Just coordinates
            break;
            
        case Format::XYZI:
            *m_stream << m_separator << point.intensity;
            break;
            
        case Format::XYZRGB:
            *m_stream << m_separator << static_cast<int>(point.r)
                      << m_separator << static_cast<int>(point.g)
                      << m_separator << static_cast<int>(point.b);
            break;
            
        case Format::XYZIRGB:
            *m_stream << m_separator << point.intensity
                      << m_separator << static_cast<int>(point.r)
                      << m_separator << static_cast<int>(point.g)
                      << m_separator << static_cast<int>(point.b);
            break;
    }
    
    *m_stream << "\n";
    
    m_pointsWritten++;
    return true;
}

bool XYZWriter::close()
{
    if (!m_isOpen) {
        return true;
    }
    
    m_stream.reset();
    m_file->close();
    m_file.reset();
    m_isOpen = false;
    
    qDebug() << "XYZWriter: File closed, wrote" << m_pointsWritten << "points";
    return true;
}

void XYZWriter::writeHeaderComment()
{
    *m_stream << "# XYZ Point Cloud Data\n";
    *m_stream << "# Generated by CloudRegistration\n";
    *m_stream << "# Created: " << QDateTime::currentDateTime().toString(Qt::ISODate) << "\n";
    
    if (!m_headerInfo.projectName.isEmpty()) {
        *m_stream << "# Project: " << m_headerInfo.projectName << "\n";
    }
    
    if (!m_headerInfo.description.isEmpty()) {
        *m_stream << "# Description: " << m_headerInfo.description << "\n";
    }
    
    if (!m_headerInfo.coordinateSystem.isEmpty()) {
        *m_stream << "# Coordinate System: " << m_headerInfo.coordinateSystem << "\n";
    }
    
    *m_stream << "# Point Count: " << m_headerInfo.pointCount << "\n";
    *m_stream << "# Bounds: X[" << m_headerInfo.minX << ", " << m_headerInfo.maxX << "] "
              << "Y[" << m_headerInfo.minY << ", " << m_headerInfo.maxY << "] "
              << "Z[" << m_headerInfo.minZ << ", " << m_headerInfo.maxZ << "]\n";
    
    // Write format description
    QString formatDesc;
    switch (m_format) {
        case Format::XYZ:
            formatDesc = "X Y Z";
            break;
        case Format::XYZI:
            formatDesc = "X Y Z Intensity";
            break;
        case Format::XYZRGB:
            formatDesc = "X Y Z Red Green Blue";
            break;
        case Format::XYZIRGB:
            formatDesc = "X Y Z Intensity Red Green Blue";
            break;
    }
    
    *m_stream << "# Format: " << formatDesc << "\n";
    *m_stream << "# Separator: '" << m_separator << "'\n";
    *m_stream << "#\n";
}
